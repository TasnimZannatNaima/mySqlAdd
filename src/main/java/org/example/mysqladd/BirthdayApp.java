package org.example.mysqladd;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.geometry.*;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;

public class BirthdayApp extends Application {

    private BirthdayDAO dao = new BirthdayDAO();
    private ListView<String> listView = new ListView<>();
    private TextField idField = new TextField();
    private TextField nameField = new TextField();
    private DatePicker birthdatePicker = new DatePicker();
    private TextField searchField = new TextField();
    private List<Birthday> currentList;

    @Override
    public void start(Stage stage) {
        VBox root = new VBox(10);
        root.setPadding(new Insets(15));

        Label idLabel = new Label("‡¶Ü‡¶á‡¶°‡¶ø:");
        Label nameLabel = new Label("‡¶®‡¶æ‡¶Æ:");
        Label dateLabel = new Label("‡¶ú‡¶®‡ßç‡¶Æ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:");

        idField.setEditable(false); // ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶®‡¶Ø‡¶º

        Button addBtn = new Button("‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®");
        Button updateBtn = new Button("‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®");
        Button deleteBtn = new Button("‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®");
        Button searchBtn = new Button("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®");
        Button refreshBtn = new Button("‡¶∏‡¶¨ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®");

        HBox inputBox = new HBox(10, idLabel, idField, nameLabel, nameField, dateLabel, birthdatePicker, addBtn, updateBtn, deleteBtn);
        inputBox.setAlignment(Pos.CENTER_LEFT);

        HBox searchBox = new HBox(10, new Label("‡¶®‡¶æ‡¶Æ/‡¶Æ‡¶æ‡¶∏:"), searchField, searchBtn, refreshBtn);
        searchBox.setAlignment(Pos.CENTER_LEFT);

        VBox layout = new VBox(15, inputBox, searchBox, listView);
        root.getChildren().add(layout);

        addBtn.setOnAction(e -> handleAdd());
        updateBtn.setOnAction(e -> handleUpdate());
        deleteBtn.setOnAction(e -> handleDelete());
        searchBtn.setOnAction(e -> handleSearch());
        refreshBtn.setOnAction(e -> loadAll());

        listView.setOnMouseClicked(e -> populateFieldsFromSelection());

        loadAll();
        showTodaysBirthdays();

        Scene scene = new Scene(root, 950, 450);
        stage.setTitle("üéÇ ‡¶ú‡¶®‡ßç‡¶Æ‡¶¶‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™");
        stage.setScene(scene);
        stage.show();
    }

    private void handleAdd() {
        try {
            String name = nameField.getText().trim();
            LocalDate date = birthdatePicker.getValue();
            if (name.isEmpty() || date == null) {
                showAlert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", "‡¶®‡¶æ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶ú‡¶®‡ßç‡¶Æ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶¶‡¶ø‡¶®‡•§");
                return;
            }

            Birthday b = new Birthday();
            b.setName(name);
            b.setBirthdate(date);
            dao.addBirthday(b);
            loadAll();
            clearFields();
        } catch (SQLException ex) {
            showAlert("‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", ex.getMessage());
        }
    }

    private void handleUpdate() {
        String selected = listView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®", "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
            return;
        }

        try {
            int index = listView.getSelectionModel().getSelectedIndex();
            Birthday b = currentList.get(index);
            b.setName(nameField.getText());
            b.setBirthdate(birthdatePicker.getValue());
            dao.updateBirthday(b);
            loadAll();
            clearFields();
        } catch (SQLException ex) {
            showAlert("‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", ex.getMessage());
        }
    }

    private void handleDelete() {
        String selected = listView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®", "‡¶Æ‡ßÅ‡¶õ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
            return;
        }

        try {
            int index = listView.getSelectionModel().getSelectedIndex();
            int id = currentList.get(index).getId();
            dao.deleteBirthday(id);
            loadAll();
            clearFields();
        } catch (SQLException ex) {
            showAlert("‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", ex.getMessage());
        }
    }

    private void handleSearch() {
        try {
            String keyword = searchField.getText();
            List<Birthday> results = dao.searchByNameOrMonth(keyword);
            populateListView(results);
        } catch (SQLException ex) {
            showAlert("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", ex.getMessage());
        }
    }

    private void loadAll() {
        try {
            List<Birthday> list = dao.getAllBirthdays();
            populateListView(list);
        } catch (SQLException ex) {
            showAlert("‡¶≤‡ßã‡¶° ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", ex.getMessage());
        }
    }

    private void populateListView(List<Birthday> list) {
        listView.getItems().clear();
        currentList = list;
        for (Birthday b : list) {
            listView.getItems().add("‡¶Ü‡¶á‡¶°‡¶ø: " + b.getId() + " | ‡¶®‡¶æ‡¶Æ: " + b.getName() + " | ‡¶ú‡¶®‡ßç‡¶Æ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: " + b.getBirthdate());
        }
    }

    private void populateFieldsFromSelection() {
        int index = listView.getSelectionModel().getSelectedIndex();
        if (index >= 0 && index < currentList.size()) {
            Birthday b = currentList.get(index);
            idField.setText(String.valueOf(b.getId()));
            nameField.setText(b.getName());
            birthdatePicker.setValue(b.getBirthdate());
        }
    }

    private void clearFields() {
        idField.clear();
        nameField.clear();
        birthdatePicker.setValue(null);
    }

    private void showTodaysBirthdays() {
        try {
            List<Birthday> list = dao.getTodaysBirthdays();
            for (Birthday b : list) {
                showAlert("üéâ ‡¶∂‡ßÅ‡¶≠ ‡¶ú‡¶®‡ßç‡¶Æ‡¶¶‡¶ø‡¶®!", b.getName() + " ‡¶è‡¶∞ ‡¶Ü‡¶ú ‡¶ú‡¶®‡ßç‡¶Æ‡¶¶‡¶ø‡¶®! üéÇ");
            }
        } catch (SQLException ex) {
            showAlert("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø", ex.getMessage());
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
